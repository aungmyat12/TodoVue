<template>
  <div>
    <input
      type="text"
      class="todo-input"
      placeholder="Wehat needs to be done"
      v-model="newTodo"
      @keyup.enter="addTodo"
    />
    <transition-group
      name="fade"
      enter-active-class="animate__animated animate__fadeInUp"
      leave-active-class="animate__animated animate__fadeOutDown"
    >
      <TodoItem
        v-for="(todo, index) in todosFiltered"
        :key="index"
        :todo="todo" :index="index"
        @removedTodo="removeTodo"
        @finishedEdit="finishedEdit"
        :checkAll="!anyRemaining"
      >
<!--        <div class="todo-item-left">-->
<!--          <input type="checkbox" v-model="todo.completed" />-->
<!--          <div-->
<!--            class="todo-item-label"-->
<!--            @dblclick="editTodo(todo)"-->
<!--            v-if="!todo.editing"-->
<!--            :class="{ completed: todo.completed }"-->
<!--          >-->
<!--            {{ todo.title }}-->
<!--          </div>-->
<!--          <input-->
<!--            v-else-->
<!--            class="todo-item-edit"-->
<!--            type="text"-->
<!--            v-model="todo.title"-->
<!--            @blur="doneEdit(todo)"-->
<!--            @keyup.enter="doneEdit(todo)"-->
<!--            v-focus-->
<!--            @keyup.esc="cancelEdit(todo)"-->
<!--          />-->
<!--        </div>-->
<!--        <div class="remove-item" @click="removeTodo(index)">-->
<!--          &times;-->
<!--        </div>-->
      </TodoItem>
    </transition-group>
    <div class="extra-container">
      <div>
        <label>
          <input
            type="checkbox"
            :checked="!anyRemaining"
            @change="checkAllTodos"
          />
          Check All
        </label>
      </div>
      <div>{{ remaining }} item left</div>
    </div>

    <div class="extra-container">
      <div>
        <button :class="{ active: filter === 'all' }" @click="filter = 'all'">
          All
        </button>
        <button
          :class="{ active: filter === 'active' }"
          @click="filter = 'active'"
        >
          Active
        </button>
        <button
          :class="{ active: filter === 'completed' }"
          @click="filter = 'completed'"
        >
          Completed
        </button>
      </div>
      <div>
        <transition name="fade">
          <button v-if="showClearCompletedButton" @click="clearCompleted">
            Clear Completed
          </button>
        </transition>
      </div>
    </div>
  </div>
</template>

<script>
import TodoItem from "./TodoItem";
export default {
  name: "TodoList",
  components: {TodoItem},
  data: () => ({
    newTodo: "",
    idForTodo: 3,
    beforeEditCache: "",
    filter: "all",
    todos: [
      {
        id: 1,
        title: "Finish Vue ScreenCast",
        completed: false,
        editing: false
      },
      {
        id: 2,
        title: "Take over world",
        completed: false,
        editing: false
      }
    ]
  }),
  directives: {
    focus: {
      // directive definition
      inserted: function(el) {
        el.focus();
      }
    }
  },
  computed: {
    remaining() {
      return this.todos.filter(todo => !todo.completed).length;
    },
    anyRemaining() {
      return this.remaining !== 0;
    },
    todosFiltered() {
      if (this.filter === "all") return this.todos;
      else if (this.filter === "active")
        return this.todos.filter(todo => !todo.completed);
      else if (this.filter === "completed")
        return this.todos.filter(todo => todo.completed);
    },
    showClearCompletedButton() {
      return this.todos.filter(todo => todo.completed).length > 0;
    }
  },
  methods: {
    addTodo() {
      if (this.newTodo.trim().length === 0) return;
      this.todos.push({
        id: this.idForTodo,
        title: this.newTodo,
        completed: false
      });
      this.newTodo = "";
      this.idForTodo++;
    },
    removeTodo(index) {
      console.log(index);
      this.todos.splice(index,1);
    },
    editTodo(todo) {
      this.beforeEditCache = todo.title;
      todo.editing = true;
    },
    doneEdit(todo) {
      if (todo.title.trim() === "") {
        todo.title = this.beforeEditCache;
      }
      todo.editing = false;
    },
    cancelEdit(todo) {
      todo.editing = false;
      todo.title = this.beforeEditCache;
    },
    checkAllTodos() {
      this.todos.forEach(todo => (todo.completed = event.target.checked));
    },
    clearCompleted() {
      this.todos = this.todos.filter(todo => !todo.completed);
    },
    finishedEdit(data) {
      this.todos.splice(data.index, 1,data.todo);
    }
  },
  mounted() {
    // this.todos.splice(0,1);
  }
};
</script>

<style>
.todo-input {
  width: 100%;
  padding: 10px 18px;
  font-size: 18px;
  margin-bottom: 16px;
}
.todo-input:focus {
  outline: 0;
}
.todo-item {
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.remove-item {
  cursor: pointer;
  margin-left: 14px;
}
.remove-item:hover {
  color: black;
}
.todo-item-left {
  display: flex;
  align-items: center;
}
.todo-item-label {
  padding: 10px;
  border: 1px solid white;
  margin-left: 12px;
}
.todo-item-edit {
  font-size: 24px;
  color: #2c3e50;
  margin-left: 12px;
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  font-family: "Avenir", Helvetica, Arial, sans-serif;
}
.todo-item-edit:focus {
  outline: none;
}
.completed {
  text-decoration: line-through;
  color: grey;
}
.extra-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-size: 16px;
  border-top: 1px solid lightgray;
  padding-top: 14px;
  margin-bottom: 14px;
}
button {
  font-size: 14px;
  background-color: white;
  appearance: none;
}
button:hover {
  background-color: lightgreen;
}
button:focus {
  outline: none;
}
.active {
  background: lightgreen;
}
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.5s;
}
.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {
  opacity: 0;
}
</style>
